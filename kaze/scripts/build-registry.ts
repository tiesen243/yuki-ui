import fs from 'node:fs/promises'
import path from 'node:path'
import type { Registry } from 'shadcn/schema'
import { registrySchema } from 'shadcn/schema'

import { registry } from '@/registry'

const REGISTRY_PATH = path.join(process.cwd(), '__registry__')
const REGISTRY_FILE = 'registry.autogenerated.json'

async function buildRegistry(registry: Registry): Promise<void> {
  const registryJson = JSON.stringify(
    { ...registry, $schema: 'https://ui.shadcn.com/schema/registry.json' },
    null,
    2,
  )

  await fs.rm(REGISTRY_PATH, { recursive: true, force: true })
  await fs.mkdir(REGISTRY_PATH, { recursive: true })

  // build /__registry_/registry.autogenerated.json
  const outputRegistryPath = path.join(REGISTRY_PATH, REGISTRY_FILE)
  await fs.writeFile(outputRegistryPath, registryJson, 'utf-8')

  // build /__registry_/index.ts
  const outputIndexPath = path.join(REGISTRY_PATH, 'index.ts')

  let index = `/* eslint-disable @typescript-eslint/ban-ts-comment, @typescript-eslint/no-explicit-any */\n// @ts-nocheck\n// This file is autogenerated by scripts/build-registry.ts\n// Do not edit this file directly\n\nimport * as React from 'react'\n\nexport const Index: Record<string, any> = {\n`
  for (const item of registry.items) {
    if (!Array.isArray(item.files) || !item.files.length) continue

    // @ts-expect-error - item.files is guaranteed to be an array by the schema
    const componentPath = `@/${item.files[0].path}`
    // @ts-expect-error - item.files is guaranteed to be an array by the schema
    const srcPath = path.join(process.cwd(), item.files[0].path)
    index += `  '${item.name}': {\n    name: '${item.name}',\n    description: '${item.description}',\n    type: '${item.type}',\n    files: [${await Promise.all(
      item.files.map(async (file: { path: string; type: string }) => {
        const filePath = file.path
        return `\n      {\n        path: '${filePath}',\n        content: "${parseContent(await fs.readFile(path.join(process.cwd(), filePath), 'utf-8'))}",\n        type: '${file.type}'\n      }`
      }),
    )}\n    ],${item.type === 'registry:example' ? `\n    component: React.lazy(() => import("${componentPath}")),\n    source: "${parseContent(await fs.readFile(srcPath, 'utf-8'))}"` : ''}\n  },\n`
  }
  index += '\n}'
  await fs.writeFile(outputIndexPath, index, 'utf-8')
}

try {
  const parsedRegistry = registrySchema.parse(registry)
  await buildRegistry(parsedRegistry)
} catch (error) {
  console.error('Error building registry:', error)
  process.exit(1)
}

function parseContent(content: string): string {
  return content
    .replace(/\\/g, '\\\\')
    .replace(/"/g, '\\"')
    .replace(/\n/g, '\\n')
    .replace(/@\/registry\/ui\/([^'"\s]+)/g, '@/components/ui/$1')
    .replace(/@yuki\/ui\/icons/g, 'lucide-react')
    .replace(/@yuki\/ui\/([^'"\s]+)/g, '@/components/ui/$1')
    .replace(/@yuki\/ui/g, '@/lib/utils')
    .trim()
}
